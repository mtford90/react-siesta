// Just makes the code a tad cleaner if no window.Q available.
var FAKE_DEFERRED = {promise: null, reject: function () {}, resolve: function () {}};

var SiestaMixin = {
    componentWillMount: function () {
        this.listeners = [];
    },
    _cancelListeners: function () {
        for (var i = 0; i < this.listeners.length; i++) {
            var cancelListener = this.listeners[i];
            cancelListener();
        }
        this.listeners = [];
    },
    componentWillUnmount: function () {
        this._cancelListeners();
    },
    _listenToModel: function (func, Model, fn) {
        var cancelListen;
        if (Model.singleton) {
            Model.one(function (err, singleton) {
                if (!err) {
                    cancelListen = this[func](singleton, function (n) {fn(singleton, n)});
                    this.listeners.push(cancelListen);
                }
                else fn(err);
            }.bind(this));
        }
        else {
            throw new Error('Cannot listen to a Model if it is not a singleton')
        }
        return function () {
            if (cancelListen) {
                var idx = this.listeners.indexOf(cancelListen);
                this.listeners.splice(idx, 1);
                cancelListen();
            }
        }.bind(this);
    },
    wrapCancelListen: function (cancelListen) {
        var wrappedCancelListen;
        if (typeof cancelListen == 'function') {
            wrappedCancelListen = function () {
                var idx = this.listeners.indexOf(cancelListen);
                this.listeners.splice(idx, 1);
                cancelListen();
            }.bind(this)
        }
        return wrappedCancelListen;
    },
    listen: function (o, fn) {
        var cancelListen;
        if (o instanceof siesta._internal.Model) cancelListen = this._listenToModel('listen', o, fn);
        else cancelListen = o.listen(fn);
        if (cancelListen) this.listeners.push(cancelListen);
        return this.wrapCancelListen(cancelListen);
    },
    query: function (model, query, prop, cb) {
        var deferred = window.Q ? window.Q.defer() : FAKE_DEFERRED;
        cb = cb || function () {};
        model.query(query, function (err, res) {
            console.log('done');
            if (!err) {
                var state = {};
                state[prop] = res;
                this.setState(state, function () {
                    cb(null, res);
                    deferred.resolve(res);
                });
            }
            else {
                cb(err);
                deferred.reject(err);
            }
        }.bind(this));
        return deferred.promise;
    }
};

if (typeof module !== 'undefined') module.exports = {SiestaMixin: SiestaMixin};
if (typeof window !== 'undefined') window.SiestaMixin = SiestaMixin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtZWQuanMiLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDhEQUE4RDtBQUM5RCxJQUFJLGFBQWEsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDOztBQUVyRixJQUFJLFdBQVcsR0FBRztJQUNkLGtCQUFrQixFQUFFLFlBQVk7UUFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7S0FDdkI7SUFDRCxnQkFBZ0IsRUFBRSxZQUFZO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QyxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLGNBQWMsRUFBRSxDQUFDO1NBQ3BCO1FBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7S0FDdkI7SUFDRCxvQkFBb0IsRUFBRSxZQUFZO1FBQzlCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0tBQzNCO0lBQ0QsY0FBYyxFQUFFLFVBQVUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDdkMsSUFBSSxZQUFZLENBQUM7UUFDakIsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO1lBQ2pCLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLEVBQUUsU0FBUyxFQUFFO2dCQUNoQyxJQUFJLENBQUMsR0FBRyxFQUFFO29CQUNOLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3RFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFB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QUFXLEVBQUUsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLFdBQVcsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUMvRSxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRSxNQUFNLENBQUMsV0FBVyxHQUFHLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyIvLyBKdXN0IG1ha2VzIHRoZSBjb2RlIGEgdGFkIGNsZWFuZXIgaWYgbm8gd2luZG93LlEgYXZhaWxhYmxlLlxudmFyIEZBS0VfREVGRVJSRUQgPSB7cHJvbWlzZTogbnVsbCwgcmVqZWN0OiBmdW5jdGlvbiAoKSB7fSwgcmVzb2x2ZTogZnVuY3Rpb24gKCkge319O1xuXG52YXIgU2llc3RhTWl4aW4gPSB7XG4gICAgY29tcG9uZW50V2lsbE1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0gW107XG4gICAgfSxcbiAgICBfY2FuY2VsTGlzdGVuZXJzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5saXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjYW5jZWxMaXN0ZW5lciA9IHRoaXMubGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgY2FuY2VsTGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICAgIH0sXG4gICAgY29tcG9uZW50V2lsbFVubW91bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fY2FuY2VsTGlzdGVuZXJzKCk7XG4gICAgfSxcbiAgICBfbGlzdGVuVG9Nb2RlbDogZnVuY3Rpb24gKGZ1bmMsIE1vZGVsLCBmbikge1xuICAgICAgICB2YXIgY2FuY2VsTGlzdGVuO1xuICAgICAgICBpZiAoTW9kZWwuc2luZ2xldG9uKSB7XG4gICAgICAgICAgICBNb2RlbC5vbmUoZnVuY3Rpb24gKGVyciwgc2luZ2xldG9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsTGlzdGVuID0gdGhpc1tmdW5jXShzaW5nbGV0b24sIGZ1bmN0aW9uIChuKSB7Zm4oc2luZ2xldG9uLCBuKX0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGNhbmNlbExpc3Rlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgZm4oZXJyKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBsaXN0ZW4gdG8gYSBNb2RlbCBpZiBpdCBpcyBub3QgYSBzaW5nbGV0b24nKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoY2FuY2VsTGlzdGVuKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkeCA9IHRoaXMubGlzdGVuZXJzLmluZGV4T2YoY2FuY2VsTGlzdGVuKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgICAgICBjYW5jZWxMaXN0ZW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpO1xuICAgIH0sXG4gICAgd3JhcENhbmNlbExpc3RlbjogZnVuY3Rpb24gKGNhbmNlbExpc3Rlbikge1xuICAgICAgICB2YXIgd3JhcHBlZENhbmNlbExpc3RlbjtcbiAgICAgICAgaWYgKHR5cGVvZiBjYW5jZWxMaXN0ZW4gPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgd3JhcHBlZENhbmNlbExpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWR4ID0gdGhpcy5saXN0ZW5lcnMuaW5kZXhPZihjYW5jZWxMaXN0ZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgICAgIGNhbmNlbExpc3RlbigpO1xuICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyYXBwZWRDYW5jZWxMaXN0ZW47XG4gICAgfSxcbiAgICBsaXN0ZW46IGZ1bmN0aW9uIChvLCBmbikge1xuICAgICAgICB2YXIgY2FuY2VsTGlzdGVuO1xuICAgICAgICBpZiAobyBpbnN0YW5jZW9mIHNpZXN0YS5faW50ZXJuYWwuTW9kZWwpIGNhbmNlbExpc3RlbiA9IHRoaXMuX2xpc3RlblRvTW9kZWwoJ2xpc3RlbicsIG8sIGZuKTtcbiAgICAgICAgZWxzZSBjYW5jZWxMaXN0ZW4gPSBvLmxpc3Rlbihmbik7XG4gICAgICAgIGlmIChjYW5jZWxMaXN0ZW4pIHRoaXMubGlzdGVuZXJzLnB1c2goY2FuY2VsTGlzdGVuKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcENhbmNlbExpc3RlbihjYW5jZWxMaXN0ZW4pO1xuICAgIH0sXG4gICAgcXVlcnk6IGZ1bmN0aW9uIChtb2RlbCwgcXVlcnksIHByb3AsIGNiKSB7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9IHdpbmRvdy5RID8gd2luZG93LlEuZGVmZXIoKSA6IEZBS0VfREVGRVJSRUQ7XG4gICAgICAgIGNiID0gY2IgfHwgZnVuY3Rpb24gKCkge307XG4gICAgICAgIG1vZGVsLnF1ZXJ5KHF1ZXJ5LCBmdW5jdGlvbiAoZXJyLCByZXMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkb25lJyk7XG4gICAgICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IHt9O1xuICAgICAgICAgICAgICAgIHN0YXRlW3Byb3BdID0gcmVzO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY2IobnVsbCwgcmVzKTtcbiAgICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXMpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfVxufTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSBtb2R1bGUuZXhwb3J0cyA9IHtTaWVzdGFNaXhpbjogU2llc3RhTWl4aW59O1xuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB3aW5kb3cuU2llc3RhTWl4aW4gPSBTaWVzdGFNaXhpbjsiXX0=