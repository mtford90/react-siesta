// Just makes the code a tad cleaner if no window.Q available.
var FAKE_DEFERRED = {promise: null, reject: function () {}, resolve: function () {}};

var SiestaMixin = {
    componentWillMount: function () {
        this.listeners = [];
    },
    _cancelListeners: function () {
        for (var i = 0; i < this.listeners.length; i++) {
            var cancelListener = this.listeners[i];
            cancelListener();
        }
        this.listeners = [];
    },
    componentWillUnmount: function () {
        this._cancelListeners();
    },
    _listenToModel: function (func, Model, fn) {
        var cancelListen;
        if (Model.singleton) {
            Model.one(function (err, singleton) {
                if (!err) {
                    cancelListen = this[func](singleton, function (n) {fn(singleton, n)});
                    this.listeners.push(cancelListen);
                }
                else fn(err);
            }.bind(this));
        }
        else {
            throw new Error('Cannot listen to a Model if it is not a singleton')
        }
        return function () {
            if (cancelListen) {
                var idx = this.listeners.indexOf(cancelListen);
                this.listeners.splice(idx, 1);
                cancelListen();
            }
        }.bind(this);
    },
    wrapCancelListen: function (cancelListen) {
        var wrappedCancelListen;
        if (typeof cancelListen == 'function') {
            wrappedCancelListen = function () {
                var idx = this.listeners.indexOf(cancelListen);
                this.listeners.splice(idx, 1);
                cancelListen();
            }.bind(this)
        }
        return wrappedCancelListen;
    },
    listen: function (o, fn) {
        var cancelListen;
        if (o instanceof siesta._internal.Model) cancelListen = this._listenToModel('listen', o, fn);
        else cancelListen = o.listen(fn);
        if (cancelListen) this.listeners.push(cancelListen);
        return this.wrapCancelListen(cancelListen);
    },
    query: function (model, query, prop, cb) {
        var deferred = window.Q ? window.Q.defer() : FAKE_DEFERRED;
        cb = cb || function () {};
        model.query(query, function (err, res) {
            console.log('done');
            if (!err) {
                var state = {};
                state[prop] = res;
                this.setState(state, function () {
                    cb(null, res);
                    deferred.resolve(res);
                });
            }
            else {
                cb(err);
                deferred.reject(err);
            }
        }.bind(this));
        return deferred.promise;
    },
    all: function (model) {
        var query, prop, cb;
        if (arguments[1] instanceof String || typeof arguments[1] == 'string') {
            prop = arguments[1];
            cb = arguments[2];
        }
        else {
            query = arguments[1];
            prop = arguments[2];
            cb = arguments[3];
        }
        return this.query(model, query, prop, cb);
    },
    isReactiveQuery: function (o) {
        // TODO: Wishy washy. Do instanceof check instead once ReactiveQuery is available on siesta object
        return typeof o.terminate == 'function';
    },
    listenAndSet: function (o, prop, cb) {
        var deferred = window.Q ? window.Q.defer() : FAKE_DEFERRED;
        cb = cb || function () {};
        var state = {};

        function updateWithResults() {
            state[prop] = o.results;
            this.setState(state, function () {
                this.listen(o, function () {
                    if (this.isReactiveQuery(o)) {
                        var state = {};
                        state[prop] = o.results;
                        this.setState(state);
                    }
                }.bind(this));
            });
        }

        if (this.isReactiveQuery(o)) {
            if (o.initialised) {
                updateWithResults.call(this);
                cb(null, o.results);
                deferred.resolve(o.results);
            }
            else {
                o.init(function () {
                    updateWithResults.call(this);
                    cb(null, o.results);
                    deferred.resolve(o.results);
                }.bind(this));
            }
        }
        return deferred.promise;
    }
};

if (typeof module !== 'undefined') module.exports = {SiestaMixin: SiestaMixin};
if (typeof window !== 'undefined') window.SiestaMixin = SiestaMixin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtZWQuanMiLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDhEQUE4RDtBQUM5RCxJQUFJLGFBQWEsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsQ0FBQyxDQUFDOztBQUVyRixJQUFJLFdBQVcsR0FBRztJQUNkLGtCQUFrQixFQUFFLFlBQVk7UUFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7S0FDdkI7SUFDRCxnQkFBZ0IsRUFBRSxZQUFZO1FBQzFCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM1QyxJQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLGNBQWMsRUFBRSxDQUFDO1NBQ3BCO1FBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7S0FDdkI7SUFDRCxvQkFBb0IsRUFBRSxZQUFZO1FBQzlCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0tBQzNCO0lBQ0QsY0FBYyxFQUFFLFVBQVUsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDdkMsSUFBSSxZQUFZLENBQUM7UUFDakIsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO1lBQ2pCLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxHQUFHLEVBQUUsU0FBUyxFQUFFO2dCQUNoQyxJQUFJLENBQUMsR0FBRyxFQUFFO29CQUNOLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3RFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFB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bnQiOlsiLy8gSnVzdCBtYWtlcyB0aGUgY29kZSBhIHRhZCBjbGVhbmVyIGlmIG5vIHdpbmRvdy5RIGF2YWlsYWJsZS5cbnZhciBGQUtFX0RFRkVSUkVEID0ge3Byb21pc2U6IG51bGwsIHJlamVjdDogZnVuY3Rpb24gKCkge30sIHJlc29sdmU6IGZ1bmN0aW9uICgpIHt9fTtcblxudmFyIFNpZXN0YU1peGluID0ge1xuICAgIGNvbXBvbmVudFdpbGxNb3VudDogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xuICAgIH0sXG4gICAgX2NhbmNlbExpc3RlbmVyczogZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY2FuY2VsTGlzdGVuZXIgPSB0aGlzLmxpc3RlbmVyc1tpXTtcbiAgICAgICAgICAgIGNhbmNlbExpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgICB9LFxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2NhbmNlbExpc3RlbmVycygpO1xuICAgIH0sXG4gICAgX2xpc3RlblRvTW9kZWw6IGZ1bmN0aW9uIChmdW5jLCBNb2RlbCwgZm4pIHtcbiAgICAgICAgdmFyIGNhbmNlbExpc3RlbjtcbiAgICAgICAgaWYgKE1vZGVsLnNpbmdsZXRvbikge1xuICAgICAgICAgICAgTW9kZWwub25lKGZ1bmN0aW9uIChlcnIsIHNpbmdsZXRvbikge1xuICAgICAgICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbExpc3RlbiA9IHRoaXNbZnVuY10oc2luZ2xldG9uLCBmdW5jdGlvbiAobikge2ZuKHNpbmdsZXRvbiwgbil9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChjYW5jZWxMaXN0ZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGZuKGVycik7XG4gICAgICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgbGlzdGVuIHRvIGEgTW9kZWwgaWYgaXQgaXMgbm90IGEgc2luZ2xldG9uJylcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGNhbmNlbExpc3Rlbikge1xuICAgICAgICAgICAgICAgIHZhciBpZHggPSB0aGlzLmxpc3RlbmVycy5pbmRleE9mKGNhbmNlbExpc3Rlbik7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgY2FuY2VsTGlzdGVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKTtcbiAgICB9LFxuICAgIHdyYXBDYW5jZWxMaXN0ZW46IGZ1bmN0aW9uIChjYW5jZWxMaXN0ZW4pIHtcbiAgICAgICAgdmFyIHdyYXBwZWRDYW5jZWxMaXN0ZW47XG4gICAgICAgIGlmICh0eXBlb2YgY2FuY2VsTGlzdGVuID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHdyYXBwZWRDYW5jZWxMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkeCA9IHRoaXMubGlzdGVuZXJzLmluZGV4T2YoY2FuY2VsTGlzdGVuKTtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgICAgICAgICBjYW5jZWxMaXN0ZW4oKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cmFwcGVkQ2FuY2VsTGlzdGVuO1xuICAgIH0sXG4gICAgbGlzdGVuOiBmdW5jdGlvbiAobywgZm4pIHtcbiAgICAgICAgdmFyIGNhbmNlbExpc3RlbjtcbiAgICAgICAgaWYgKG8gaW5zdGFuY2VvZiBzaWVzdGEuX2ludGVybmFsLk1vZGVsKSBjYW5jZWxMaXN0ZW4gPSB0aGlzLl9saXN0ZW5Ub01vZGVsKCdsaXN0ZW4nLCBvLCBmbik7XG4gICAgICAgIGVsc2UgY2FuY2VsTGlzdGVuID0gby5saXN0ZW4oZm4pO1xuICAgICAgICBpZiAoY2FuY2VsTGlzdGVuKSB0aGlzLmxpc3RlbmVycy5wdXNoKGNhbmNlbExpc3Rlbik7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBDYW5jZWxMaXN0ZW4oY2FuY2VsTGlzdGVuKTtcbiAgICB9LFxuICAgIHF1ZXJ5OiBmdW5jdGlvbiAobW9kZWwsIHF1ZXJ5LCBwcm9wLCBjYikge1xuICAgICAgICB2YXIgZGVmZXJyZWQgPSB3aW5kb3cuUSA/IHdpbmRvdy5RLmRlZmVyKCkgOiBGQUtFX0RFRkVSUkVEO1xuICAgICAgICBjYiA9IGNiIHx8IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICBtb2RlbC5xdWVyeShxdWVyeSwgZnVuY3Rpb24gKGVyciwgcmVzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZG9uZScpO1xuICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSB7fTtcbiAgICAgICAgICAgICAgICBzdGF0ZVtwcm9wXSA9IHJlcztcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHN0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNiKG51bGwsIHJlcyk7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNiKGVycik7XG4gICAgICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH0sXG4gICAgYWxsOiBmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgICAgdmFyIHF1ZXJ5LCBwcm9wLCBjYjtcbiAgICAgICAgaWYgKGFyZ3VtZW50c1sxXSBpbnN0YW5jZW9mIFN0cmluZyB8fCB0eXBlb2YgYXJndW1lbnRzWzFdID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBwcm9wID0gYXJndW1lbnRzWzFdO1xuICAgICAgICAgICAgY2IgPSBhcmd1bWVudHNbMl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBxdWVyeSA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHByb3AgPSBhcmd1bWVudHNbMl07XG4gICAgICAgICAgICBjYiA9IGFyZ3VtZW50c1szXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeShtb2RlbCwgcXVlcnksIHByb3AsIGNiKTtcbiAgICB9LFxuICAgIGlzUmVhY3RpdmVRdWVyeTogZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgLy8gVE9ETzogV2lzaHkgd2FzaHkuIERvIGluc3RhbmNlb2YgY2hlY2sgaW5zdGVhZCBvbmNlIFJlYWN0aXZlUXVlcnkgaXMgYXZhaWxhYmxlIG9uIHNpZXN0YSBvYmplY3RcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvLnRlcm1pbmF0ZSA9PSAnZnVuY3Rpb24nO1xuICAgIH0sXG4gICAgbGlzdGVuQW5kU2V0OiBmdW5jdGlvbiAobywgcHJvcCwgY2IpIHtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gd2luZG93LlEgPyB3aW5kb3cuUS5kZWZlcigpIDogRkFLRV9ERUZFUlJFRDtcbiAgICAgICAgY2IgPSBjYiB8fCBmdW5jdGlvbiAoKSB7fTtcbiAgICAgICAgdmFyIHN0YXRlID0ge307XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlV2l0aFJlc3VsdHMoKSB7XG4gICAgICAgICAgICBzdGF0ZVtwcm9wXSA9IG8ucmVzdWx0cztcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbihvLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUmVhY3RpdmVRdWVyeShvKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZVtwcm9wXSA9IG8ucmVzdWx0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNSZWFjdGl2ZVF1ZXJ5KG8pKSB7XG4gICAgICAgICAgICBpZiAoby5pbml0aWFsaXNlZCkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZVdpdGhSZXN1bHRzLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgY2IobnVsbCwgby5yZXN1bHRzKTtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKG8ucmVzdWx0cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvLmluaXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVXaXRoUmVzdWx0cy5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBjYihudWxsLCBvLnJlc3VsdHMpO1xuICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKG8ucmVzdWx0cyk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9XG59O1xuXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIG1vZHVsZS5leHBvcnRzID0ge1NpZXN0YU1peGluOiBTaWVzdGFNaXhpbn07XG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHdpbmRvdy5TaWVzdGFNaXhpbiA9IFNpZXN0YU1peGluOyJdfQ==